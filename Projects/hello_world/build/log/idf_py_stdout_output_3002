Command: ninja all
[1/16] Linking C static library esp-idf/mbedtls/libmbedtls.a
[2/16] Linking C static library esp-idf/esp_pm/libesp_pm.a
[3/16] Performing build step for 'bootloader'
[1/1] cd /project/hello_world/build/bootloader/esp-idf/esptool_py && /opt/esp-idf-tools/python_env/idf5.5_py3.10_env/bin/python /opt/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 /project/hello_world/build/bootloader/bootloader.bin
Bootloader binary size 0x6680 bytes. 0x980 bytes (8%) free.
[4/14] Linking C static library esp-idf/esp_timer/libesp_timer.a
[5/14] Linking C static library esp-idf/esp_driver_gpio/libesp_driver_gpio.a
[6/14] Building C object esp-idf/HAL/CMakeFiles/__idf_HAL.dir/gpio_driver.c.obj
[7/14] Linking C static library esp-idf/xtensa/libxtensa.a
[8/14] Linking C static library esp-idf/HAL/libHAL.a
[9/14] Linking C static library esp-idf/main/libmain.a
[10/14] Generating esp-idf/esp_system/ld/sections.ld
[11/14] Building C object CMakeFiles/hello_world.elf.dir/project_elf_src_esp32.c.obj
[12/14] Linking CXX executable hello_world.elf
[13/14] Generating binary image from built executable
esptool.py v4.10.dev2
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated /project/hello_world/build/hello_world.bin
[14/14] cd /project/hello_world/build/esp-idf/esptool_py && /opt/esp-idf-tools/python_env/idf5.5_py3.10_env/bin/python /opt/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /project/hello_world/build/partition_table/partition-table.bin /project/hello_world/build/hello_world.bin
hello_world.bin binary size 0x27630 bytes. Smallest app partition is 0x100000 bytes. 0xd89d0 bytes (85%) free.
